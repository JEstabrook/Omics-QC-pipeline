__author__ = "Joey Estabrook"
__email__ = "estabroj@ohsu.edu"
__license__ = "MIT"

"""Computation Hub omic data processing pipeline"""

configfile:"omic_config.yaml"
import datetime
timestamp = ('{:%Y-%m-%d_%H:%M:%S}'.format(datetime.datetime.now()))


def format_plot_columns():
    factors = config['meta_columns_to_plot'].keys()
    reformat_factors = '"' + '","'.join(factors) + '"'
    return 'c({})'.format(reformat_factors)

rule all:
    input:
        "results/tables/{}_STAR_mapping_statistics.txt".format(config['project_id']),
        "data/{}_counts.txt".format(config['project_id']),
        "analysis_code/{}_analysis.R".format(config['project_id']),
        "results/tables/{}_Normed_with_Ratio_and_Abundance.txt".format(config['project_id'])

project_id = config["project_id"]
RSEQQC_ENV = 'source activate {config["rseqc_env"]}'.format(config=config)

rule insertion_profile:
    input:
        "/home/exacloud/lustre1/CEDAR/cfrna/analysis/pancan/genecounts_rmdp/{sample}_bam/{sample}.rmd.bam"
    params:
        seq_layout=config['seq_layout']
    output:
        "rseqc/{sample}.insertion_profile.r",
        "rseqc/{sample}.insertion_profile.R1.pdf",
        "rseqc/{sample}.insertion_profile.R2.pdf",
        "rseqc/{sample}.insertion_profile.xls",
    shell:
        "{RSEQQC_ENV} insertion_profile.py -s '{params.seq_layout}' -i {input} -o {sample}"

rule star_statistics:
    input:
        dir="/home/users/estabroj/CEDAR/cfrna/analysis/pancan/genecounts_rmdp"
    params:
        project_id = project_id
    output:
        "results/tables/{}_STAR_mapping_statistics.txt".format(config['project_id'])
    message:
        "Executing star_statistics on {timestamp}"
    shell:
        "python StarUtilities.py -d {input.dir} -p {params.project_id}"

rule compile_counts:
    input:
        sample_counts="/home/exacloud/lustre1/CEDAR/cfrna/analysis/pancan/results"
    params:
        project_id = project_id
    output:
        "data/{project_id}_counts.txt".format(project_id=project_id)
    shell:
        "python StarUtilities.py -d {input.sample_counts} -p {params.project_id} -c"

rule generate_qc_qa:
 input:
    counts = expand("data/{project_id}_counts.txt", project_id=config['project_id'])
 params:
    project_id = config["project_id"],
    datadir = config['base_dir'],
    meta = config["omic_meta_data"],
    baseline = config["baseline"],
    linear_model = config["linear_model"],
    sample_id = config["sample_id"],
    meta_viz = format_plot_columns(),
 output:
    expand("analysis_code/{project_id}_analysis.R", project_id=config['project_id'])

 log:
    "/logs"

 shell:
    "python GenerateAbundanceFile.py -d {params.datadir} -mf {params.meta} -p {params.project_id} -b {params.baseline} -lm {params.linear_model} -id '{params.sample_id}' -pl '{params.meta_viz}' -df -da {input.counts}"

rule run_qc_qa:
    input:
        script = "analysis_code/{}_analysis.R".format(config['project_id'])
    output:
        "results/tables/{}_Normed_with_Ratio_and_Abundance.txt".format(config['project_id'])
    shell:
        "Rscript analysis_code/{}_analysis.R".format(config['project_id'])