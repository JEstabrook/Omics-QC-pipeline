__author__ = "Joey Estabrook"
__email__ = "estabroj@ohsu.edu"
__license__ = "MIT"

"""Computation Hub omic data processing pipeline"""

configfile:"omic_config.yaml"
import datetime
import sys
import os

timestamp = ('{:%Y-%m-%d_%H:%M:%S}'.format(datetime.datetime.now()))

project_id = config["project_id"]
rseqqc_env = config["rseqc_env"]
samples, = glob_wildcards("/home/exacloud/lustre1/CEDAR/cfrna/analysis/pancan/genecounts_rmdp/{sample}_bam/")

#TODO Remove abspath for glob_wildcards function

ext = ['r','R1.pdf','R2.pdf','xls']
insertion_prof_ext = ['r','R1.pdf','R2.pdf','xls']
inner_distance_ext = ['_freq.txt','_plot.pdf','_plot.r','.txt']
clipping_prof_ext = ['r','R1.pdf','R2.pdf','xls']
read_dist_ext = ['txt']
read_gc_ext = ['.xls','_plot.r','_plot.pdf']

rseq_func=['insertion_profile','read_distribution','clipping_profile']
rseq_dir=['insertion_profile','read_distribution','clipping_profile']


rule_dirs = ['insertion_profile','inner_distance','clipping_profile','read_GC','star_statistics','compile_counts','generate_qc_qa','run_qc_qa','star_statistics','deseq2']
for rule in rule_dirs:
    if not os.path.exists(os.path.join(os.getcwd(),'logs',rule)):
        log_out = os.path.join(os.getcwd(), 'logs', rule)
        os.makedirs(log_out)
        print(log_out)

def message(mes):
  sys.stderr.write("|--- " + mes + "\n")


def format_plot_columns():
    factors = config['meta_columns_to_plot'].keys()
    reformat_factors = '"' + '","'.join(factors) + '"'
    return 'c({})'.format(reformat_factors)


rule all:
    input:
        "results/tables/{}_STAR_mapping_statistics.txt".format(config['project_id']),
        "data/{}_counts.txt".format(config['project_id']),
        "analysis_code/{}_analysis.R".format(config['project_id']),
        "results/tables/{}_Normed_with_Ratio_and_Abundance.txt".format(config['project_id']),
        expand("rseqc/insertion_profile/{sample}/{sample}.insertion_profile.{ext}",sample=samples, ext=insertion_prof_ext),
        expand("rseqc/inner_distance/{sample}/{sample}.inner_distance{ext}", sample = samples, ext = inner_distance_ext),
        expand("rseqc/clipping_profile/{sample}/{sample}.clipping_profile.{ext}", sample = samples, ext = clipping_prof_ext),
        expand("rseqc/read_distribution/{sample}/{sample}.read_distribution.{ext}", sample = samples, ext = read_dist_ext),
        expand("rseqc/read_GC/{sample}/{sample}.GC{ext}", sample = samples, ext = read_gc_ext)


rule insertion_profile:
    input:
        "/home/exacloud/lustre1/CEDAR/cfrna/analysis/pancan/genecounts_rmdp/{sample}_bam/{sample}.rmd.bam",
    params:
        seq_layout=config['seq_layout'],
    output:
        "rseqc/insertion_profile/{sample}/{sample}.insertion_profile.r",
        "rseqc/insertion_profile/{sample}/{sample}.insertion_profile.R1.pdf",
        "rseqc/insertion_profile/{sample}/{sample}.insertion_profile.R2.pdf",
        "rseqc/insertion_profile/{sample}/{sample}.insertion_profile.xls",
    conda:
        "envs/rseqc.yaml"
    shell:
        "insertion_profile.py -s '{params.seq_layout}' -i {input} -o rseqc/insertion_profile/{wildcards.sample}/{wildcards.sample}"

rule inner_distance:
    input:
        "/home/exacloud/lustre1/CEDAR/cfrna/analysis/pancan/genecounts_rmdp/{sample}_bam/{sample}.rmd.bam",
    params:
        bed=config['bed_file']
    output:
        "rseqc/inner_distance/{sample}/{sample}.inner_distance.txt",
        "rseqc/inner_distance/{sample}/{sample}.inner_distance_plot.r",
        "rseqc/inner_distance/{sample}/{sample}.inner_distance_plot.pdf",
        "rseqc/inner_distance/{sample}/{sample}.inner_distance_freq.txt",
    conda:
        "envs/rseqc.yaml"
    shell:
        "inner_distance.py -i {input} -o rseqc/inner_distance/{wildcards.sample}/{wildcards.sample} -r {params.bed}"


rule clipping_profile:
    input:
        "/home/exacloud/lustre1/CEDAR/cfrna/analysis/pancan/genecounts_rmdp/{sample}_bam/{sample}.rmd.bam",
    params:
        seq_layout=config['seq_layout'],
    output:
        "rseqc/clipping_profile/{sample}/{sample}.clipping_profile.r",
        "rseqc/clipping_profile/{sample}/{sample}.clipping_profile.R1.pdf",
        "rseqc/clipping_profile/{sample}/{sample}.clipping_profile.R2.pdf",
        "rseqc/clipping_profile/{sample}/{sample}.clipping_profile.xls",
    conda:
        "envs/rseqc.yaml"
    shell:
        "clipping_profile.py -i {input} -s '{params.seq_layout}' -o rseqc/clipping_profile/{wildcards.sample}/{wildcards.sample}"


rule read_distribution:
    input:
        "/home/exacloud/lustre1/CEDAR/cfrna/analysis/pancan/genecounts_rmdp/{sample}_bam/{sample}.rmd.bam",
    params:
        bed=config['bed_file']
    output:
        "rseqc/read_distribution/{sample}/{sample}.read_distribution.txt",
    conda:
        "envs/rseqc.yaml"
    shell:
        "read_distribution.py -i {input} -r {params.bed} > {output}"

rule read_GC:
    input:
        "/home/exacloud/lustre1/CEDAR/cfrna/analysis/pancan/genecounts_rmdp/{sample}_bam/{sample}.rmd.bam",
    output:
        "rseqc/read_GC/{sample}/{sample}.GC.xls",
        "rseqc/read_GC/{sample}/{sample}.GC_plot.r",
        "rseqc/read_GC/{sample}/{sample}.GC_plot.pdf",
    conda:
        "envs/rseqc.yaml"
    shell:
        "read_GC.py -i {input} -o rseqc/read_GC/{wildcards.sample}/{wildcards.sample}"

rule star_statistics:
    input:
        dir="/home/users/estabroj/CEDAR/cfrna/analysis/pancan/genecounts_rmdp"
    params:
        project_id = project_id
    output:
        "results/tables/{}_STAR_mapping_statistics.txt".format(config['project_id'])
    message:
        "Executing star_statistics on {timestamp}"
    log:
        "logs/star_statistics/"
    shell:
        "python StarUtilities.py -d {input.dir} -p {params.project_id}"

rule compile_counts:
    input:
        sample_counts="/home/exacloud/lustre1/CEDAR/cfrna/analysis/pancan/results"
    params:
        project_id = project_id
    output:
        "data/{project_id}_counts.txt".format(project_id=project_id)
    shell:
        "python StarUtilities.py -d {input.sample_counts} -p {params.project_id} -c"

rule generate_qc_qa:
 input:
    counts = expand("data/{project_id}_counts.txt", project_id=config['project_id'])
 params:
    project_id = config["project_id"],
    datadir = config['base_dir'],
    meta = config["omic_meta_data"],
    baseline = config["baseline"],
    linear_model = config["linear_model"],
    sample_id = config["sample_id"],
    gtf_file = config["gtf_file"],
    meta_viz = format_plot_columns(),
 output:
    "analysis_code/{project_id}_analysis.R".format(project_id=config['project_id'])
 log:
    "logs/generate_qc_qa/"

 shell:
    "python GenerateAbundanceFile.py -d {params.datadir} -mf {params.meta} -p {params.project_id} -b {params.baseline} -lm {params.linear_model} -id '{params.sample_id}' -pl '{params.meta_viz}' -g '{params.gtf_file}' -df -da {input.counts}"

rule run_qc_qa:
    input:
        script = "analysis_code/{}_analysis.R".format(config['project_id'])
    output:
        "results/tables/{}_Normed_with_Ratio_and_Abundance.txt".format(config['project_id'])
    conda:
        "envs/omic_qc_wf.yaml"
    log:
        "logs/run_qc_qa/"
    shell:
        "Rscript analysis_code/{}_analysis.R".format(config['project_id'])


rule deseq2_init:
    input:
        counts="data/{project_id}_counts.txt".format(project_id = project_id)
    output:
        "results/deseq2/{project_id}_all.rds".format(project_id=project_id)
    params:
        samples=config["samples"],
        design=config["pca"]["labels"],
        row_names=config["sample_id"]
    conda:
        "envs/deseq2.yaml"
    log:
        "logs/deseq2/init.log"
    threads: 6
    shell:
        "Rscript ./scripts/deseq2-init.R {threads} {input.counts} {params.samples} {output} {params.design} {params.row_names}"


rule pca:
    input:
        "deseq2/{project_id}_all.rds".format(project_id=project_id)
    output:
        pca="results/deseq2/pca.svg",
        rds="results/deseq2/rlog_dds.rds"

    params:
        pca_labels=config["pca"]["labels"]
    conda:
        "envs/deseq2.yaml"
    log:
        "logs/deseq2/pca.log"
    shell:
        "Rscript ./scripts/plot-pca.R {input} {output.pca} {output.rds}"


def get_contrast(wildcards):
    """Return each contrast provided in the configuration file"""
    return config["diffexp"]["contrasts"][wildcards.contrast]

rule deseq2:
    input:
        "deseq2/{project_id}_all.rds".format(project_id=project_id)
    output:
        table="results/diffexp/{contrast}.diffexp.tsv",
        ma_plot="results/diffexp/{contrast}.ma-plot.svg",
    params:
        contrast=get_contrast
    conda:
        "envs/deseq2.yaml"
    log:
        "logs/deseq2/{contrast}.diffexp.log"
    threads: 6
    shell:
        "Rscript ./scripts/deseq2.R"
